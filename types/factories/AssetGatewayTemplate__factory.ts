/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AssetGatewayTemplate,
  AssetGatewayTemplateInterface,
} from "../AssetGatewayTemplate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wrapNativeTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wrapNativeTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012a9380380620012a98339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61109280620002176000396000f3fe6080604052600436106100595760003560e01c806347e7ef241461006257806361f340351461007e578063715018a6146100a95780638da5cb5b146100c0578063f2fde38b146100eb578063f3fef3a31461011457610060565b3661006057005b005b61007c60048036038101906100779190610a9c565b61013d565b005b34801561008a57600080fd5b50610093610153565b6040516100a09190610aeb565b60405180910390f35b3480156100b557600080fd5b506100be610179565b005b3480156100cc57600080fd5b506100d561018d565b6040516100e29190610aeb565b60405180910390f35b3480156100f757600080fd5b50610112600480360381019061010d9190610b06565b6101b6565b005b34801561012057600080fd5b5061013b60048036038101906101369190610a9c565b610239565b005b61014561024f565b61014f82826102cd565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61018161024f565b61018b60006103dc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101be61024f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361022d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022490610bb6565b60405180910390fd5b610236816103dc565b50565b61024161024f565b61024b82826104a0565b5050565b610257610657565b73ffffffffffffffffffffffffffffffffffffffff1661027561018d565b73ffffffffffffffffffffffffffffffffffffffff16146102cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c290610c22565b60405180910390fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036103aa57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b50505050506103d8565b6103d73330838573ffffffffffffffffffffffffffffffffffffffff1661065f909392919063ffffffff16565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106255780600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105519190610aeb565b602060405180830381865afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190610c57565b10156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610cd0565b60405180910390fd5b6106203382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106e89092919063ffffffff16565b610653565b6106523033838573ffffffffffffffffffffffffffffffffffffffff1661065f909392919063ffffffff16565b5b5050565b600033905090565b6106e2846323b872dd60e01b85858560405160240161068093929190610cff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061076e565b50505050565b6107698363a9059cbb60e01b8484604051602401610707929190610d36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061076e565b505050565b60006107d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108369092919063ffffffff16565b90506000815114806107f25750808060200190518101906107f19190610d97565b5b610831576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082890610e36565b60405180910390fd5b505050565b6060610845848460008561084e565b90509392505050565b606082471015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088a90610ec8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108bc9190610f62565b60006040518083038185875af1925050503d80600081146108f9576040519150601f19603f3d011682016040523d82523d6000602084013e6108fe565b606091505b509150915061090f8783838761091b565b92505050949350505050565b6060831561097d5760008351036109755761093585610990565b610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b90610fc5565b60405180910390fd5b5b829050610988565b61098783836109b3565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156109c65781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa919061103a565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3382610a08565b9050919050565b610a4381610a28565b8114610a4e57600080fd5b50565b600081359050610a6081610a3a565b92915050565b6000819050919050565b610a7981610a66565b8114610a8457600080fd5b50565b600081359050610a9681610a70565b92915050565b60008060408385031215610ab357610ab2610a03565b5b6000610ac185828601610a51565b9250506020610ad285828601610a87565b9150509250929050565b610ae581610a28565b82525050565b6000602082019050610b006000830184610adc565b92915050565b600060208284031215610b1c57610b1b610a03565b5b6000610b2a84828501610a51565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ba0602683610b33565b9150610bab82610b44565b604082019050919050565b60006020820190508181036000830152610bcf81610b93565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c0c602083610b33565b9150610c1782610bd6565b602082019050919050565b60006020820190508181036000830152610c3b81610bff565b9050919050565b600081519050610c5181610a70565b92915050565b600060208284031215610c6d57610c6c610a03565b5b6000610c7b84828501610c42565b91505092915050565b7f496e73756666696369656e7420574554482062616c616e636500000000000000600082015250565b6000610cba601983610b33565b9150610cc582610c84565b602082019050919050565b60006020820190508181036000830152610ce981610cad565b9050919050565b610cf981610a66565b82525050565b6000606082019050610d146000830186610adc565b610d216020830185610adc565b610d2e6040830184610cf0565b949350505050565b6000604082019050610d4b6000830185610adc565b610d586020830184610cf0565b9392505050565b60008115159050919050565b610d7481610d5f565b8114610d7f57600080fd5b50565b600081519050610d9181610d6b565b92915050565b600060208284031215610dad57610dac610a03565b5b6000610dbb84828501610d82565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610e20602a83610b33565b9150610e2b82610dc4565b604082019050919050565b60006020820190508181036000830152610e4f81610e13565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610eb2602683610b33565b9150610ebd82610e56565b604082019050919050565b60006020820190508181036000830152610ee181610ea5565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610f1c578082015181840152602081019050610f01565b83811115610f2b576000848401525b50505050565b6000610f3c82610ee8565b610f468185610ef3565b9350610f56818560208601610efe565b80840191505092915050565b6000610f6e8284610f31565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610faf601d83610b33565b9150610fba82610f79565b602082019050919050565b60006020820190508181036000830152610fde81610fa2565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061100c82610fe5565b6110168185610b33565b9350611026818560208601610efe565b61102f81610ff0565b840191505092915050565b600060208201905081810360008301526110548184611001565b90509291505056fea264697066735822122032c282867d9ef8e69e9f334fb912cbd9825e2b333747867f1f5921421085accd64736f6c634300080f0033";

type AssetGatewayTemplateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetGatewayTemplateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetGatewayTemplate__factory extends ContractFactory {
  constructor(...args: AssetGatewayTemplateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AssetGatewayTemplate";
  }

  deploy(
    _wrapNativeTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AssetGatewayTemplate> {
    return super.deploy(
      _wrapNativeTokenAddress,
      overrides || {}
    ) as Promise<AssetGatewayTemplate>;
  }
  getDeployTransaction(
    _wrapNativeTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wrapNativeTokenAddress, overrides || {});
  }
  attach(address: string): AssetGatewayTemplate {
    return super.attach(address) as AssetGatewayTemplate;
  }
  connect(signer: Signer): AssetGatewayTemplate__factory {
    return super.connect(signer) as AssetGatewayTemplate__factory;
  }
  static readonly contractName: "AssetGatewayTemplate";
  public readonly contractName: "AssetGatewayTemplate";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetGatewayTemplateInterface {
    return new utils.Interface(_abi) as AssetGatewayTemplateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetGatewayTemplate {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetGatewayTemplate;
  }
}
